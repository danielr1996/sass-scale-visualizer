//https://stackoverflow.com/questions/58069059/dynamic-spacing-classes-with-sass
@function fibonacci($n) {
  @if $n == 0 {
    @return 0;
  } @else if $n == 1 or $n == 2 {
    @return 1;
  }
  @return fibonacci($n - 1) + fibonacci($n - 2);
}

@function quadratic($x){
  @return $x * $x;
}

@function goldenratio($x){
  @if $x == 1 {
    @return 1;
  }
  @return goldenratio($x - 1) * 1.618;
}

@function double($x){
  @return pow(2,$x);
}


@function pow($number, $exponent) {
  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  }

  @return $value;
}

@function eightgrid($x){
  @return 8 * $x;
}

$functions: [fibonacci, quadratic, eightgrid];

@function range($fn, $to,$from: 1, ) {
  $list: [];
  @for $i from $from through $to {
    $list: append($list, call(get-function($fn), $i));
  }
  @return $list;
}

@mixin generate($unit, $from, $to,$fn) {
  $sizes: range($fn, $from: $from, $to: $to);
  $sizes: join(0, $sizes);
  @debug $sizes;
  $directions: ('left':'l', 'right':'r', 'top':'t', 'bottom':'b');
  $properties: ('padding':'p', 'margin':'m');
  @each $plong, $pshort in $properties {
    @for $i from 1 through length($sizes) {
      $size: nth($sizes, $i);
      @each $dlong, $dshort in $directions {
        .#{$pshort}#{$dshort}-#{$i - 1} {
          #{$plong}-#{$dlong}: #{$size}#{$unit};
        }
      }
      .#{$pshort}x-#{$i - 1} {
        #{$plong}-left: #{$size}#{$unit};
        #{$plong}-right: #{$size}#{$unit};
      }
      .#{$pshort}y-#{$i - 1} {
        #{$plong}-top: #{$size}#{$unit};
        #{$plong}-bottom: #{$size}#{$unit};
      }
      .#{$pshort}-#{$i - 1} {
        #{$plong}: #{$size}#{$unit};
      }
      .w-#{$i - 1} {
        width: #{$size}#{$unit};
      }
      .h-#{$i - 1} {
        height: #{$size}#{$unit};
      }
    }
  }
}